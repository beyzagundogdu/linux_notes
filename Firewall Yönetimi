1. iptables

iptables, Linux çekirdeğinde (kernel) bulunan Netfilter altyapısını kullanarak paket filtreleme, 
NAT, port yönlendirme vb. işlevleri yönetmek için kullanılan geleneksel araçtır. Temel olarak chain (zincir) ve table (tablo) kavramları etrafında döner.

1.1. Temel Kavramlar
	1.	Tables (Tablolar)
	•	filter: Gelen, giden, yönlendirilen paketlerin filtrelendiği ana tablo. (Varsayılan)
	•	nat: NAT (Network Address Translation) işlemleri (örn. port yönlendirme).
	•	mangle: Paket başlıklarını değiştirmek (TTL vb.).
	•	raw: Bağlanma noktası (conntrack) devre dışı bırakma gibi özel işlemler.
	2.	Chains (Zincirler)
Her tablo içerisinde aşağıdaki gibi varsayılan zincirler olabilir:
	•	INPUT: Sisteme gelen paketler
	•	OUTPUT: Sistemden çıkan paketler
	•	FORWARD: Sistem üzerinden yönlendirilen (router gibi davranıyorsa) paketler
	•	PREROUTING, POSTROUTING vb. (nat tablosunda kullanılır)
	3.	Kuralların Sırası
iptables’ta kurallar sıralı olarak işlenir. Bir paket, ilk eşleşen kuralı yakaladığında o kuralın aksiyonuna (ACCEPT, DROP, REJECT vb.) göre hareket eder.

1.2. Temel Kullanım

sudo iptables -[komut] [zincir] [kural]

Örnek komutlar:
	1.	Kural Ekleme: -A (Append), -I (Insert)
	2.	Kural Silme: -D (Delete)
	3.	Listeleme: -L (List)

Örnekler
	1.	Tüm Kuralları Listeleme

sudo iptables -L -n -v

	•	-L: Listele
	•	-n: IP’leri numeric göster (DNS çözümü yapma)
	•	-v: Detaylı bilgi (istatistikler vb.)

	2.	Basit Bir Port Engelleme

sudo iptables -A INPUT -p tcp --dport 22 -j DROP

Bu komut, INPUT zincirinde TCP 22 (SSH) portuna gelen paketleri DROP eder. Yani dışarıdan SSH bağlantısı engellenir.

	3.	Sadece Belirli IP’ye İzin Verme (Whitelist)

sudo iptables -A INPUT -p tcp --dport 22 -s 192.168.1.100 -j ACCEPT
sudo iptables -A INPUT -p tcp --dport 22 -j DROP

	•	İlk kural: 192.168.1.100 adresinden 22 portuna gelen istekler ACCEPT.
	•	İkinci kural: Geri kalan her yerden 22 portuna DROP.

	4.	Varsayılan Politikayı (Policy) Belirlemek

sudo iptables -P INPUT DROP
sudo iptables -P FORWARD DROP
sudo iptables -P OUTPUT ACCEPT

	•	INPUT ve FORWARD zinciri için varsayılan eylem DROP, OUTPUT için ACCEPT.
	•	Bu yaklaşımla, açıkça izin vermedikçe hiçbir gelen trafik kabul edilmez.

1.3. NAT Örneği (Port Yönlendirme)

sudo iptables -t nat -A PREROUTING -p tcp -d 203.0.113.10 --dport 8080 -j DNAT --to-destination 192.168.1.10:80

	•	-t nat: nat tablosunda çalıştır.
	•	PREROUTING zincirinde, dış IP (203.0.113.10) 8080 portuna gelen trafik, iç IP (192.168.1.10) 80 portuna yönlendirilir.

Not: Modern Linux dağıtımlarında “nftables” da kullanılabiliyor. Ama iptables hâlâ yaygın ve pek çok yerde mevcut.



2. ufw (Uncomplicated Firewall)

ufw, Ubuntu ve türevi sistemlerde daha kolay firewall yönetimi için tasarlanmış bir araçtır. iptables’in karmaşık komutlarına kıyasla daha basit sözdizimi sunar. 
Arkada iptables kuralları oluşturur ama kullanıcıya sade bir arayüz sağlar.

2.1. Temel Kullanım

sudo ufw [komut] [seçenekler]

En yaygın komutlar enable, disable, status, allow, deny, delete.

Örnekler
	1.	Aktifleştirme / Devre Dışı Bırakma

sudo ufw enable
sudo ufw disable

enable dediğinizde varsayılan ayarlar devreye girer. Ubuntu’da genellikle varsayılan ayar gelen trafiği engelleyip sadece belirli portlara izin vermektir.

	2.	Kural Listeleme

sudo ufw status
sudo ufw status verbose

Kuralların hangilerinin açık/kapalı olduğunu gösterir.

	3.	Port Açma

sudo ufw allow 80/tcp

HTTP (80) portundan gelen TCP isteklerine izin verir.

	4.	Portu Engelleme

sudo ufw deny 21/tcp

FTP (21) portuna gelen isteklere izin verme (deny).

	5.	Belirli IP Adresi için İzin

sudo ufw allow from 192.168.1.100 to any port 22

Sadece 192.168.1.100 kaynağından 22 numaralı porta (SSH) erişime izin verir.

2.2. Günlük Hayattan Senaryo (ufw)
	•	Yeni Bir Sunucuda Basit Güvenlik
Diyelim ki Ubuntu sunucuyu yeni kurdunuz ve sadece 22 (SSH) ve 80 (HTTP) portlarını açmak istiyorsunuz:

sudo ufw allow 22/tcp
sudo ufw allow 80/tcp
sudo ufw enable

Böylece varsayılan politika diğer tüm portları engeller, ama 22 ve 80’e izin vermiş olursunuz.

	•	SSH Portunu Değiştirme
Sisteminizde SSH 2222 portundan dinliyor. İzin vermek için:

sudo ufw allow 2222/tcp
sudo ufw deny 22/tcp



UFW, özellikle temel firewall ihtiyaçları olan kullanıcılar için kolaylık sağlar. Birkaç komutla temel port ayarlarını yapabilirsiniz.



3. firewalld

firewalld, Red Hat tabanlı dağıtımlar (RHEL, CentOS, Fedora vb.) başta olmak üzere birçok modern sistemde varsayılan firewall yönetimi aracıdır.
Dinamik bir firewall yönetim sistemi sunar; bölgeler (zones) ve servis konseptleriyle çalışır.

3.1. Temel Kavramlar
	•	Zones (Bölgeler): Public, home, work, dmz, internal vb. Ağ arayüzü veya kaynak IP bu bölgelerden birine atanabilir. Her bölgenin farklı kuralları olabilir.
	•	Services (Servisler): Servis tanımları (ör. http, https, ssh vb.) /etc/firewalld altındaki XML dosyalarında tutulur. Tek komutla firewall-cmd --add-service=http diyerek 80 portunu açmış olursunuz.
	•	Rich Rules: Daha gelişmiş, ayrıntılı kurallar eklemek için kullanılan bir format.

3.2. Temel Kullanım

sudo firewall-cmd [opsiyonlar]

En yaygın kullanımlar:
	1.	Hangi Zone Aktif?

firewall-cmd --get-active-zones

Örneğin “public” zondaysanız, network arayüzünüz public zone’a bağlı olabilir.

	2.	Varolan Kuralları Listeleme

firewall-cmd --list-all

Aktif zone için tanımlanmış servis, port, kaynak vb. her şeyi gösterir.

	3.	Bir Servisi Açmak

sudo firewall-cmd --permanent --add-service=http
sudo firewall-cmd --permanent --add-service=https
sudo firewall-cmd --reload

	•	--permanent: Kalıcı kural ekler (firewalld yeniden başlatıldığında kalıcı olur).
	•	--reload: Yeni kuralları uygulamak için kullanılır.

	4.	Port Açmak (Servis tanımı yoksa):

sudo firewall-cmd --permanent --add-port=8080/tcp
sudo firewall-cmd --reload


	5.	SSH’a Belirli IP’den Erişim İzni (Rich Rule Örneği):

firewall-cmd --permanent --add-rich-rule="rule family='ipv4' source address='192.168.1.100' port port='22' protocol='tcp' accept"
firewall-cmd --reload

Sadece 192.168.1.100 kaynağından 22/TCP erişimine izin verilir.

3.3. Günlük Hayattan Senaryo (firewalld)
	•	Kurum Ağı için Özel Zone: Mesela “internal” zone oluşturup kurum ağınıza bağlı arayüzü oraya taşıyabilir, bu zone’da daha gevşek kurallar;
“public” zone’da daha katı kurallar uygulayabilirsiniz.
	•	Web Sunucusu Kurulumu: Yeni bir CentOS sunucu üzerinde Apache kurdunuz. 80 ve 443 portlarını açmak için:

sudo firewall-cmd --permanent --add-service=http
sudo firewall-cmd --permanent --add-service=https
sudo firewall-cmd --reload

Böylece web trafiği artık kabul edilmiş olur.



4. Hangisini Ne Zaman Kullanmalı?
	1.	iptables:
	•	Çok esnek ve güçlü, fakat karmaşık.
	•	İnce ayarlar, özel senaryolar, NAT kuralları vb. için iyi.
	•	Günümüzde doğrudan iptables yerine “nftables” da tercih edilebiliyor ancak iptables hâlâ çok yaygın.
	2.	ufw (Uncomplicated Firewall):
	•	Özellikle Ubuntu/Debian tarafında basit kullanımlar için ideal.
	•	Sık sorulan: “Portu nasıl açarım/engellerim?” Basit birkaç komutla halledebilirsiniz.
	•	Arka planda iptables kuralları üretir.
	3.	firewalld:
	•	Red Hat/CentOS/Fedora gibi sistemlerde varsayılan.
	•	Zone kavramı sayesinde farklı network arayüzlerine farklı kuralları dinamik olarak uygulamak kolay.
	•	“service” tanımları ve “rich rule” desteğiyle pratik yönetim.

⸻

5. Öneriler ve İpuçları
	1.	Temel Güvenlik İlkesi:
	•	Varsayılan olarak her şeyi DROP/REJECT edip, sadece ihtiyaç duyulan portları açmak en iyi güvenlik yaklaşımıdır.
	2.	Servis Tabanlı Yönetim:
	•	ufw ve firewalld’de “servis” bazlı yönetim kolaydır. Örn: --add-service=http yerine “port 80” demek zorunda kalmazsınız.
	3.	Loglama (Logging):
	•	iptables kurallarında -j LOG ile veya firewalld’de “logging” opsiyonuyla paketlerin kaynağını/tipini izleyebilirsiniz.
	•	Dikkat: fazla loglama, log dosyalarını şişirebilir.
	4.	Sürüm ve Dağıtım Farklılıkları:
	•	Ubuntu/Debian tarafında ufw varsayılan gelebilir.
	•	RHEL/CentOS/Fedora’da firewalld varsayılan gelir.
	•	Minimal veya özel kurulumlarda iptables ile elle yönetim gerekli olabilir.
	5.	NAT ve Port Yönlendirme:
	•	ufw ve firewalld ile de port yönlendirme yapılabilir. Ancak genelde iptables (veya nftables) ile NAT ayarları daha detaylı yönetilir.
	6.	Kural Düzenine Dikkat:
	•	iptables’ta kuralların sırası çok önemli. Yanlış bir yere eklenen kural trafik akışını engelleyebilir.
	•	ufw ve firewalld gibi araçlar, bu sıralamayı genellikle otomatik yönetir.
	7.	Kalıcı Kural:
	•	iptables komutları genellikle kalıcı değildir (sistemi yeniden başlatınca silinir). Dağıtıma göre iptables-persistent veya benzeri yöntemlerle kalıcı yapmak gerekir.
	•	ufw ve firewalld’de kural eklerken “permanent” veya “enable” yaklaşımları ile kalıcı hale getirebilirsiniz.

